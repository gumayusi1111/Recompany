services:
  backend:
    build: ./backend
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "${BACKEND_PORT:-3002}:3002"
    env_file:
      - .env
    depends_on:
      - db
    environment:
      - PORT=3002
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/company_re
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - PORT=3000
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  management:
    build: ./management
    volumes:
      - ./management:/app
      - /app/node_modules
    environment:
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/company_re
      - NEXT_PUBLIC_API_BASE=http://localhost:3002/api
      - NEXT_PUBLIC_FRONTEND_URL=http://localhost:3000
    ports:
      - "${MANAGEMENT_PORT:-3001}:3001"
    env_file:
      - .env
    depends_on:
      - db
      - backend
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  nginx:
    image: nginx:latest
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/certs:/etc/nginx/certs
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - management
      - backend
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: company_re
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d company_re"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
